@page "/matchpeople"
@inject MatchService _Service
@inject NavigationManager _navManager
@inject IDialogService DialogService

<div>
    <MudText Typo="Typo.h4" Align="Align.Center"  Class="p-5">봉사자 선택</MudText>
    <MudPaper>
        <CountButton Class="m-3 pt-3" @bind-Count=@MaxMatchedCount LabelText="몇 명씩 하나요?" AdornmentText="2"/>
        <div class="d-flex justify-content-evenly align-content-center gap-3 flex-wrap p-3">
            <MudChipSet @bind-SelectedChips="selected"  MultiSelection="true" Filter="true">
                @foreach (People people in peoples)
                {
                    <MudChip Color="Color.Default" SelectedColor="Color.Success" Text="@people.Name"></MudChip>
                }
            </MudChipSet>
        </div>
        
        <MudButton Class="mt-3" Variant="Variant.Outlined" Color="Color.Success" FullWidth="true" OnClick="Selected">완료</MudButton>

    </MudPaper>
</div>


@code {
    private List<People> peoples = new List<People>();
    MudChip[]? selected;
    private int MaxMatchedCount = 2;

    protected override void OnInitialized()
    {
        peoples = (_Service.GetPeopleAsync()).OrderBy(i => i.Name).ToList();
    }

    private async Task Selected()
    {
        if (selected is null)
        {
            var parameters = new DialogParameters { ["Content"] = $"봉사자를 선택해주세요." };
            DialogService.Show<ConfirmDialog>("알림", parameters);
            return;
        }

        List<People> selectedPeople = peoples.Where(i => selected!.Any(s => s.Text == i.Name)).ToList();

        if(selectedPeople.Count > 40)
        {
            var parameters = new DialogParameters { ["Content"] = $"현재 선택하신 봉사자는 {selectedPeople.Count}명 입니다.\r\n{selectedPeople.Count - 40}명 선택을 취소하세요." };
            DialogService.Show<ConfirmDialog>("40명 초과", parameters);
            return;
        }

        _Service.Matcheds = await _Service.GetMatchAsync(selectedPeople, MaxMatchedCount);
        _navManager.NavigateTo("/");
    }
}
