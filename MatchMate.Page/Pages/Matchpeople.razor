@page "/matchpeople/{Id}"
@inject MatchService _Service
@inject NavigationManager _navManager
@inject IDialogService DialogService
@inject IReadFileService FileService

<div>
    <MudText Typo="Typo.h4" Align="Align.Center"  Class="p-5">봉사자 선택</MudText>
    <MudPaper>
        <CountButton Class="m-3 pt-3" @bind-Count=@MaxMatchedCount LabelText="몇 명씩 하나요?" AdornmentText="2"/>
        <div class="d-flex justify-content-evenly align-content-center gap-3 flex-wrap p-3">
            <MudChipSet @bind-SelectedChips="selected"  MultiSelection="true" Filter="true"v SelectedValuesChanged="SelectedChanged">
                @foreach (People people in peoples.Where(i => i.Gender!.Equals("형제")))
                {
                    <MudChip Color="Color.Default" SelectedColor="Color.Success" Text="@people.Name"></MudChip>
                }
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />                
                @foreach (People people in peoples.Where(i => i.Gender!.Equals("자매")))
                {
                    <MudChip Color="Color.Default" SelectedColor="Color.Secondary" Text="@people.Name"></MudChip>
                }
            </MudChipSet>
        </div>

        <div class="mud-theme-secondary px-3 py-3 mud-elevation-16 rounded-xl fixed" style="top:20px;right:20px;z-index:99;">현재 선택한 봉사자 수: @SelectedCount</div>
        <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Success" FullWidth="true" OnClick="Selected">완료</MudButton>

    </MudPaper>
</div>


@code {

    [Parameter]
    public string? Id { get; set; }

    private List<People> peoples = new List<People>();
    MudChip[]? selected;
    private int MaxMatchedCount = 2;
    private int SelectedCount = 0;

    protected override async Task OnInitializedAsync()
    {
        var json = await FileService.ReadFile("wwwroot/data/Peoples.json");
        peoples = _Service.GetPeople(json).OrderBy(i => i.Name).ToList();        

        //이미 배정되어 있는 사람은 삭제함
        if (!Id!.Equals("new"))
        {
            foreach (People people in _Service.GetMatcheds())
            {
                peoples.RemoveAll(i => i.Name == people.Name);
            }
        }
    }

    private async Task Selected()
    {
        if (selected is null)
        {
            var parameters = new DialogParameters { ["Content"] = $"봉사자를 선택해주세요." };
            DialogService.Show<ConfirmDialog>("알림", parameters);
            return;
        }

        List<People> selectedPeople = peoples.Where(i => selected!.Any(s => s.Text == i.Name)).ToList();

        if (selectedPeople.Count > 40)
        {
            var parameters = new DialogParameters { ["Content"] = $"현재 선택하신 봉사자는 {selectedPeople.Count}명 입니다.\r\n{selectedPeople.Count - 40}명 선택을 취소하세요." };
            DialogService.Show<ConfirmDialog>("40명 초과", parameters);
            return;
        }

        if (Id!.Equals("new"))
        {
            _Service.Matcheds = await _Service.GetMatchAsync(selectedPeople, MaxMatchedCount);
        }
        else
        {
            _Service.Matcheds = await _Service.AddMatchAsync(selectedPeople, MaxMatchedCount, _Service.Matcheds!);
        }

        _navManager.NavigateTo("/");
    }

    private void SelectedChanged()
    {
        if (selected is not null) SelectedCount = selected.Count();
    }
}
