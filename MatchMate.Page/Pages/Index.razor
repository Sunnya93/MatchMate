@page "/"
@inject MatchService _Service
@inject IMessageService _MessageSerivce
@inject IDialogService DialogService

@if (Matches is null || Matches.Count == 0)
{
    <section class="d-flex vh-100 justify-content-center align-items-center">
        <MudButton Variant="Variant.Filled" Href="match" EndIcon="@Icons.Material.Filled.GroupAdd" Style="background-color: yellowgreen; color: white; width: 300px; height: 300px;">
            구역 배정하기
        </MudButton>
    </section>
}
else
{
    <MudCarousel TData="object" Class="mud-width-full" Style="height:600px;" AutoCycle=false>
        @foreach (Matched matched in Matches)
        {
            <MudCarouselItem>
                <MatchedCard Place="@matched.Place" MatchedTeam="@matched.MatchedPerson" RerenderCallback="Rerender"/>
            </MudCarouselItem>
        }

    </MudCarousel>
    <MudButton Variant="Variant.Outlined" FullWidth="true" EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddPlace">구역 추가하기</MudButton>
    <MudButton Class="mt-3" Variant="Variant.Filled" FullWidth="true" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="Send">문자보내기</MudButton>

}


@code {

    private List<Matched>? Matches;

    protected override void OnInitialized()
    {
        Matches = _Service.Matcheds;
    }

    private async Task Send()
    {
        Tuple<string, List<People>> _messageInfo = _Service.SetMessageAndContact();

        await _MessageSerivce.SendMessageAsync(_messageInfo.Item1, _messageInfo.Item2.Select(i => i.PhoneNumber).ToList()!);
    }

    private async Task AddPlace()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<AddPlaceDialog>("구역 추가하기", options);
        var result = await dialog.Result;
    }

    private void Rerender()
    {
        Matches = _Service.Matcheds;
        StateHasChanged();
    }
}