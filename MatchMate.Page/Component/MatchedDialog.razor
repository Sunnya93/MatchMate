@inject ISnackbar Snackbar
@inject MatchService _Service
@inject IDialogService DialogService
@inject IReadFileService FileService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1"/>
            멤버 편집하기
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 300px; overflow-y: scroll">
            <div class="d-flex pb-3">
                <Search Peoples="Peoples" Title="추가할 사람" @bind-searchValue="@Name" ListCliecked="Add"/>
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="Add"></MudIconButton>
            </div>
            <MudChipSet AllClosable="true" OnClose="Closed">
                @foreach (People value in Matched!)
                {
                    <MudChip Text="@value.Name"></MudChip>
                }
            </MudChipSet>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">닫기</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public List<People>? Matched { get; set; }
    [Parameter] public Place? NowPlace { get; set; }

    private List<People>? Peoples;
    private string? Name;

    protected override async Task OnInitializedAsync()
    {
        var json = await FileService.ReadFile("wwwroot/data/Peoples.json");
        List<People> NoMatcheds = _Service.GetPeople(json).OrderBy(i => i.Name).ToList();
        if(_Service.Matcheds is not null)
        {
            List<People> Matcheds = _Service.GetMatcheds();

            //조회되는 정보 중 이미 매칭 완료된 사람들의 경우 해당 정보로 대체
            for (int i = 0; i < NoMatcheds.Count; i++)
            {
                var person = NoMatcheds[i];
                if (Matcheds.Contains(person))
                {
                    int index = Matcheds.IndexOf(person);
                    NoMatcheds[i] = Matcheds[index];
                }
            }
        }

        Peoples = NoMatcheds;
    }

    public async void Add()
    {
        //이미 추가된 사람은 리스트에서 제외
        foreach (var matched in _Service.Matcheds!)
        {
            matched.MatchedPerson!.ForEach(peopleList => peopleList.RemoveAll(person => person.Name == Name));
        }
      
        People people = Peoples!.Where(i => i.Name == Name).FirstOrDefault()!;
        if(NowPlace is not null) people.MatchedPlace = NowPlace;

        //만약 기존 리스트에 있지 않으면 신규 추가
        if (people is not null) Matched!.Add(people);
        else
        {
            var options = new DialogOptions { CloseOnEscapeKey = true };
            var parameters = new DialogParameters { ["Name"] = Name };
            var dialog = await DialogService.ShowAsync<AddPersonDialog>("신규 봉사자 추가", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                people = (People)result.Data;
                Matched!.Add(people);
                StateHasChanged();
            }
        }
    }

    public void Closed(MudChip chip) => Matched!.RemoveAll(i => i.Name == chip.Text);
    private void Cancel() => MudDialog!.Cancel();
}