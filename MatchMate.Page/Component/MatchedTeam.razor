@inject IDialogService DialogService

<MudButton Variant="Variant.Filled" Style="@($"color: white; background:{buttonColor}; height: 60px;")" Class="w-100" @onclick="OpenDialog">
    @_text
</MudButton>

@code {
    [Parameter]
    public List<People>? Matched { get; set; }

    [Parameter]
    public Place? NowPlace { get; set; }

    [Parameter]
    public string? buttonColor { get; set; }

    private string? _text { get; set; }

    [Parameter]
    public EventCallback ReRenderCallback { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if(!firstRender) _text = string.Join(", ", Matched!.Select(p => p.Name));
    }

    protected override void OnInitialized()
    {
        _text = string.Join(", ", Matched!.Select(p => p.Name));
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["Matched"] = Matched, ["NowPlace"] = NowPlace };
        var dialog = await DialogService.ShowAsync<MatchedDialog>("팀 수정하기", parameters, options);

        var result = await dialog.Result;

        if (result.Canceled)
        {
            _text = string.Join(", ", Matched!.Select(p => p.Name));
            await ReRenderCallback.InvokeAsync();
        }
    }
}